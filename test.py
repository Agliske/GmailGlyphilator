import glyphilator


# search_metadata = {
#                                             "subject_string":"Google Alert: sample subject",
#                                             "dateRange":{"startDate":None,"endDate":None,"newerThan":"Today"},
#                                             "rest_api_query":"Subject:Google Alert",
#                                             "headless_browser": True,
#                                             "geometrySelection": "Toroid",
#                                             "wordlist_paths" : ["path/to/WL1.txt","path/to/WL2.txt","path/to/WL3.txt"],
#                                             "search_fuzziness":0.6,
#                                             "search_string": "sample string",
#                                             "num_results_requested": 200,
#                                             "scaling_range": (0.2,2.5),
#                                             "scaling_type": "minmax",
#                                             "scaling_scope":"dataset", #determines if glyphs scaling is relative to max and min of whole dataset, or just 1 glyph.
#                                             "scaling_wrt_wordlist":"total", #options ["total","percent","boolean"]
#                                             "save_matched_words":False,
#                                             "protos_save_path":"path/to/antz/save/dir",
#                                             "uploaded_articledata_path":"None",
#                                             "scale_method":"wordlist",
#                                             "csv_headerFlags":[True,True]} #csv_headerflags determines if the [first row, first column] of csv dataset are identifiers or tags as opposed to data

# csv_filepath = r"C:\Users\aglis\Documents\Python_Projects\GmailGlyphilator\examples\student_dataset.csv"
# allGlyphData_dict, articleData, search_metadata = glyphilator.generateGlyphInput_CSV(csv_filepath,search_metadata=search_metadata)
# # print("allglyphdata_dict = ", allGlyphData_dict)

# # print(search_metadata["wordlist_paths"])
# # scaled_allglyphdata,unScaled_allglyphdata = glyphilator.scaleFunc_forCSV(allGlyphData_dict,search_metadata)
# print("unscaled data = \n", unScaled_allglyphdata)
# print("scaled data = \n",scaled_allglyphdata)
from glyphilator import generate_arc
import pandas as pd
import numpy as np
import os
from mapFetcher_mapbox import fetchMapImage
cwd = os.getcwd()

import pandas as pd

# Define the file paths
input_file = r"C:\Users\aglis\Documents\Python_Projects\ConstellisData\Viz1_ExtraColumns.csv"  # Replace with your actual file
output_file = r"C:\Users\aglis\Documents\Python_Projects\ConstellisData\Viz1_ExtraColumns_herndon.csv"

# List of valid ZIP codes
valid_zips = {str(z).strip() for z in [
    22095,20170,20192,20195,20190,20194,20189,22096,20196,20171,20164,20191,20163,20167,20172,20102,20104,20103,20041,20101,20166,22066,20165,22124,22033,22181,22182,20151,20147,20148,20146,20149,22185,22183,22035,22067,22102,22180,20152,20120,20122,22030,22038,22034,20854,20859,22031,20837,22027,22081,22082,22116,22118,22119,22107,22108,22109,22106,22103,20121,22037,22043,22032,20153,20105,22036,20818,22101,20817,20878,22046,22042,20874,20143,20175,22213,20812,22003,20850,20124,20816,22009,20177,20178,22015,22040,22205,22044,20899,20109,20847,20848,20849,20857,20839,22207,22151,20176,20108,20892,20111,20852,20810,20811,20813,20824,20825,20827,20875,22041,20894,20169,20814,22039,20841,20884,20885,20898,22203,20168,22152,22230,22240,22241,22242,22243,22244,22245,22216,20016,22215,20851,22210,22227,22226,20047,20889,20842,20877,20156,22219,20880,20896,22312,22156,22158,22159,22160,22161,20110,20815,22246,22201,22217,22212,20113,20895,20155,20007,22311,20891,22204,20057,20015,20883,20392,22153,22209,20886,20008,20129,22304,20855,20879,22150,20511,20853,22211,22214,22206,20838,20876,20136,20916,22302,20566,20037,20158,20052,20521,20520,20418,20902,20910,22225,20009,20117,20431,20036,20050,20551,20159,20415,20433,20270,20245,20240,20372,20012,56901,56920,22310,20906,20160,20010,22122,20006,20506,20542,20907,20908,20911,20915,20918,20997,20897,20420,22202,20203,20206,20207,20208,20210,20211,20213,20214,20215,20218,20221,20222,20223,20232,20233,20235,20238,20239,20241,20244,20251,20261,20262,20265,20266,20268,20277,20289,20299,20303,20306,20310,20317,20330,20350,20355,20370,20380,20389,20390,20391,20393,20394,20395,20398,20402,20403,20404,20405,20406,20410,20411,20412,20413,20414,20416,20419,20421,20423,20424,20425,20427,20428,20429,20434,20435,20437,20439,20440,20441,20442,20444,20447,20451,20453,20456,20460,20463,20468,20469,20470,20501,20502,20503,20505,20507,20509,20523,20524,20525,20526,20527,20531,20533,20537,20538,20539,20541,20546,20547,20548,20552,20554,20555,20557,20559,20570,20572,20573,20575,20576,20577,20578,20579,20581,20586,20591,20594,20599,20504,20029,20030,20040,20042,20043,20044,20045,20049,20053,20055,20056,20058,20061,20062,20063,20065,20067,20068,20069,20070,20071,20073,20074,20075,20076,20077,20078,20080,20081,20082,20091,56904,56902,56945,56950,56965,20571,20254,20314,20318,20508,20522,20500,20220,20005,22305,20913,20230,20026,20027,20011,20227,20059,22315,20242,20228,20060,20250,20024,20004,20252,20131,20536,20224,20197,20535,20038,20033,20530,20560,20118,20202,20436,20426,20039,20598,20408,20260,20585,22199,20001,20580,20553,20407,20549,20229,20422,22301,20301,20565,20597,22332,20219,20912,20226,22303,20472,22331,20217,20529,20901,20198,20134,22192,20237,20216,20534,20401,20013,20066,20022,20204,20201,20417,20035,20090,20212,20064,20515,20832,22314,22125,21790,20319,20871,20544,20510,20017,20543,20830,20540,20112,20137,22313,22320,22333,22334,20182,56915,20590,20373,22350,22306,22060,20340,20181,20914,20903,20376,20375,20388,20374,20882,20593,22307,20787,20003,20783,20002,20032,20782,22079,20528,21710,20018,20993,56933,56944,56972,20712,20904,22193,22194,22195,20860,21777,22309,20905,20132,20020,20141,20722,20788,20745,20142,20742,20872,22308,20781,20741,20750,22121,20738,20180,20861,20019,20862,20868,20833,20710,20740,22191,20185,20737,20744,21717,20187,21754,21704,22025,20697,20752,20704,20140,20748,20184,20777,20784,20749,20866,20770,20785,20616,21770,20757,20119,20746,21716,20743,20731,20790,20791,20705,21703,21036,20768,20188,20753,21737,20759,20747,20139,20138,20703,21755,22026,20135,21029,20707,20706,20771,21738,20115,25425,20799,22172,20762,20607,20144,20130,20735,20709,20725,20726,20723,20658,20708,20116,21797,20797,20769,21771,21705,21709,21758,20186,25432,21150,21774,22135,21765,21794,22134,21044,21714,20640,21723,20720,21715,22728,21718,25441,20603,20721,25414,25423,20724,20763,20718,20719,21046,22643,22556,22545,21701,22739,20623,20675,21042,20774,22463,25410,20701,20604,20755,21769,20794,21045,21779,20128,20695,22611,20715,25438,20772,22712,22620,22646,20775,20773,20792,22639,20717,25446,21793,20716,21762,21104,21113,21792,21702,25442,22724,21784,22642,22720,20601,22554,20602,21756,20646,21043,20677,21041,21075,21114,20613,22555,21163,20106,21076,20662,22734,21782,21054,21077,21144,22742,21798,22663,25430,20693,21035,25443,21228,22627,22406,21791,22430,22471,21776,21773,21244,21240,20617,22656,22714,22623,21250,20611,22640,21713,21133,22622,20711,21775,22746,22718,21090,21241,21032,21108,21061,21235,20776,21759,22630,21227,22737,22412,25413,21229,20754,21062,21140,25440,22736,21788,25405,21207,20632,22624,21757,21048,22601,21778,21733,21146,21746,20637,25428,20778,25404,21216,22741,21223,21117,22405,21225,21405,21401,20608,21037,21208,22716,22747,21215,20622,21781,21060,21157,21230,22726,20736,20779,20765,25402,22655,20758,20751,25401,21071,22402,21217,22403,21290,21201,22401,22404,22649,21203,21233,21263,21264,21270,21273,21275,21279,21281,21282,21289,21297,21298,21211,21226,21209,21278,21106,21202,21734,20733,21136,22448,22645,21153,21720,21231,21411,21783,20764,21404,21412,20689,25420,21403,21123,21122,21012,21287,21210,20714,25403,21721,22603,21795,21727,21787,21218,21740,21402,21780,22547,21020,20639,22610,21212,21022,22749,20612,21742,22433,22602,21213,21205,22485,25419,21747,22553,22701,21139,21158,21749,21741,21409,20661,21204,22407,21251,25421,20732,21224,22508,22713,21239,21719,21252,21094,21214,20664,21093,22526,21056,20610,21222,21284,21155,21285,21030,22451,22657,21206,22408,22740,25427,21023,21031,21074,20659,21052,21065,20678,22446,21286,17214,17250,22729,22735,22542,21767,22481,21237,22641,22538,21234,20621,22650,21219,22626,21722,21152,22725,17263,22637,22604,20660,20645,21221,20676,17320,21236,22660,20624,22733,20682,21666,20618,17340,20625,17272,21131,22625,22544,21102,22652,22719,20656,22551,22715,22654,22722,21057,21092,22948,17256,22535,17268,22565,22580,22567,17247,21220,26711,21128,21711,22443,21665,20685,21088,22711,25411,20615,20609,26808,21111,21619,21671,21676,22730,21082,21120,21162,21647,26817,17225,20606,21051,21027,17325,17261,17237,17331,21053,20627,20626,21624,22743,17344,22989,21013,20636,17332,17333,17334,21087,26865,26823,17329,21612,21652,22436,22644,21156,22835,22664,17335,17343,22960,21661,21663,22709,22732,17310,21638,20650,22428,17222,17235,17353,21047,22731,22509,22534,22727,21085,21161,21010,21105,21018,20657,17311,17350,17327,22427,17355,25422,20619,21662,17303,22501,22558,21750,20688,21653,17231,22476,17361,20629,21084,21040,17362,25434,26851,22957,22824,22851,21658,22748,22738,17307,17236,22520,22581,22438,17301,21014,21050,17349,17201,20634,17202,22552,21009,17212,25444,21669,26714,17252,22972,20620,26704,22514,17304,22723,21679,17363,22442,17254,17306,17360,21648,20670,21654,22546,17342,22524,21017,21015,17364,21154,22842,17316,21132,21620,21766,20692,21130,20653,17371,21677,25437,22849,23015,25431,21690,17407,17352,21678,22844,20690,17337,20667,22968,21601,17238,26761,21001,17375,22847,21617,22942,17372,17408,22973,23170,23126,22965,22469,17321,21028,17313,26755,17257,22923,20630,17324,17224,23024,23117,20686,17403,26810,21673,17233,21610,21625,21622,21657,21667,26722,17267,26801,21005,26757,21656,22810,17246,21160,22529,21555,22560,20674,17265,17401,17322,22853,22577,23047,17405,21623,23093,22572,17266,22488,17211,21613,21078,17402,21641,17356,17302,20684,22845,21530,17315,21034,26763,17244,17365,22827,23148,17221,17323,17404,17314,21609,17065,17232,17228,21645,17309,17358,20628,17019,15536,21655,17366,22833,17251,17215,21634,20680,17318,21660,21628,23192,22472,22935,17007,23009,22947,21918,17223,21664,21902,22815,22911,26812,17271,21644,21560,15535,17312,17240,17406,22570,15533,21631,22940,22936,21668,22840,22832,22454,21903,22511,21651,17317,21626,17241,26719,21607,17229,26852,17345,20687,23069,17015,17518,21629,21835,21904,21917,21675,17239,21919,22435,23005,17563,17532,17262,17027,17347,22974,23115,17210,17368,21640,21635,17339,21930,23084,21636,17516,21643,26845,21639,26836,17081,17370,26753,22834,23023,17220,22802,23067,17565,17055,26767,23065,21914,21672,21911,17582,23106,26710,22846,17547,15537,21913,22811,16689,21502,17255,22909,22460,17502,22850,23177,21649,22548,23153,21632,21501,21503,21504,21901,22901,21650,17550,23059,21670,17013,22905,22906,22907,22910,16691,17319,17264,23146,22807,21556,17551,17219,22908,22437,21505,17512,17603,17072,24471,26818,21869,22904,21659,22830,17217,23116,21912,19362,17560,23162,22803,23102,17554,21627,22801,17070,17611,21915,19964,23129,23161,21557,17050,23058,17566,17071,17213,21529,22987,23060,17575,22945,17011,23085,22504,22848,17570,22932,17057,17089,17001,21524,22523,17034,17568,22902,17584,26838,26731,16674,17253,17552,22820,23063,22456,16694,17249,19953,17504,23233,17243,15522,17113,16650,23086,26726,22473,22963,17043,17022,22841,17122,21921,17006,19938,17538,16679,17536,22528,17101,17040,17104,23294,23228,21814,17537,23038,23103,21545,21916,21837,17124,24441,17622,17604,17606,17607,17608,17699,17605,23055,17120,17025,17121,17123,17125,17126,17127,17128,17129,23039,23227,17130,17102,23014,16633,19955,21542,26743,21922,21528,17105,17106,17108,17140,17177,23079,17579,23111,17602,22903,19363,16672,17103,21562,15564,26847,21539,22530,21840,21861,17580,23160,15534,17601,15545,23238,17111,17090,17503,22432,17520,22831,21532,19934,23288,26750,19943,24431,21543,23229,19952,17107,23230,17093,17053,16634,16621,21920,23222,19351,17109,23226,21865,24486,21540,19904,17047,21830,19950,17260,16623,23091,21821,22507,17021,23173,21856,23180,17110,22539,17545,22821,22517,22503,17576,21523,17585,19979,23022,17572,23232,23269,23242,17036,23223,19734,26833,17509,15550,17573,19352,19980,16659,17562,23032,17041,19936,19933,23218,23241,23249,23260,23261,23273,23274,23276,23278,23279,23282,23284,23285,23286,23290,23291,23292,23293,23295,24469,17033,23220,23221,19709,23075,23255,19360,24467,22812,19730,22513,22579,16622,22959,22924,21521,23289,17505,23298,24437,26802,16678,23219,16685,19931,22943,23181,19346,19347,19708,15538,17024,17066,23113,19906,26717,16695,19701,21824,19973,23108,23124,19330,17068,19716,19702,17010,19717,19905,19715,24590,19712,19718,19725,19726,19954,23141,17534,23175,23225,19903,22946,19714,17078,17064,17529,17535,17540,26739,16664,19977,17112,17564,17508,19350,26866,17020,21866,19310,23027,17075,23250,19733,22980,23150,17521,24482,17035,15553,22482,17543,23235,15559,23224,19390,19962,19713,26855,19711,19901,23139,16662,17037,22576,17052,15539,22931,21801,23110,21538,17018,21810,19956,19902,17501,15554,19318,17083,16667,19946,21561,23114,16657,16638,22937,21875,19365,16631,22920,19731,17016,17527,15552,23123,19940,23236,22480,19311,23234,21867,15530,19961,17557,17069,17085,22843,23031,21822,19706,21802,21803,17082,21826,15532,19374,17042,17060,21853,19367,17003,23149,17522,22939,23231,16647,17058,17051,23004,15558,17533,21836,19808,19960,17074,19369,26720,16670,17506,23156,16682,17028,23092,24402,19720,21536,19941,22578,19707,23112,17054,21522,15562,21890,17549,16673,24401,15926,24421,23089,19804,23297,26707,23169,23011,21817,15521,17578,23140,19320,21871,17056,19721,15924,19348,17519,22969,23832,17528,23237,19963,17581,15560,19358,19736,17088,19375,16637,17567,17077,16660,22938,17032,23440,19376,19947,26884,21550,17555,26815,23120,26263,16655,21804,19805,17073,16625,15542,23176,17039,22952,24562,17029,15565,26260,17002,17062,22958,26807,19807,23040,16654,17517,17046,23190,21838,26886,21849,19710,23071,19357,23070,19316,19344,24477,17059,23836,19801,19806,19735,17507,26814,19885,19886,19890,19891,19892,19893,19894,19895,19896,19897,19898,19899,19880,19884,16693,23043,17044,17038,19372,19732,19850,23147,24463,21520,17094,23030,19501,17569,23831,16648,16665,17004,17067,23168,19802,21857,19968,17045,15541,15549,19317,16652,24479,15963,17061,21541,19366,15548,24485,15563,22971,19803,17076,15540,26289,22949,23921,23050,23003,23838,19543,23061,26292,17026,23035,19335,19382,15936,21850,26270,19809,15510,19354,19540,17009,17023,23127,19966,19544,"08001",17087,15930,19383,24442,23427,26271,16611,16635,19810,23834,15921,17049,17099,23002,26716,23936,21874,19567,24440,21851,19951,19339,23188,19343,23068,15955,"08353",19551,23128,15557,17014,21852,17005,21531,23064,19565,15953,15934,23860,17097,19608,15952,23090,19331,19520,17084,19060,"08067",19381,19340,19380,23426,17048,23066,19373,19395,24599,"08302",19703,17030,19480,23076,15501,19607,15551,19523,26804,15411,26269,17978,15946,19061,19341,15555,16602,17841,26705,21863,17098,19353,22967,19969,15485,23056,17017,"08098",16669,23488,19550,19319,19609,"08320",21872,19507,15935,17080,23875,15424,15520,23399,23806,16603,15925,15546,23178,22976,15561,23801,19342,15938,15928,24581,23416,15951,24433,"08311","08321",24464,23804,19017,19945,23154,23109,"08345",24411,26296,17980,23083,23025,19610,15956,23409,19939,19958,17086,15962,15937,24476,17853,16630,23105,15547,19611,15959,19014,24430,17957,16699,23396,15904,16601,19425,19470,23119,19052,15958,"08085",19508,19345,15544,16683,17963,24472,"08313",23183,19602,19397,19398,19399,23803,23417,17968,26254,22922,23021,19603,19612,15902,23415,19039,23045,22964,23833,17864,17830,19013,"08014",19601,24413,23899,26764,23359,23186,19559,19506,23187,17843,19015,23358,26287,"08318","08039",24432,19355,15531,16617,21841,19421,17966,19063,16641,15502,24458,"08315",16686,23442,23131,15459,16629,17983,21829,21862,23881,15901,23885,19604,19016,15945,23389,24459

    ]}

# Load the CSV file
df = pd.read_csv(input_file)
# print(df)

# Ensure the "zip" column is treated as a string for matching
# df["zip"] = df["zip"].astype(str)
df["zip"] = df["zip"].astype(str).str.strip().str.split(".").str[0]  # Remove decimal points if present


# Filter rows where the "zip" column contains a valid ZIP code
filtered_df = df[df["zip"].isin(valid_zips)]
# print(filtered_df)

# Save the filtered data to a new CSV file
filtered_df.to_csv(output_file, index=False)

print(f"Filtered data saved to {output_file}")
