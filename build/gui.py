
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


import pathlib
import tkcalendar
# import tkinter as tk
from tkinter import INSERT
from tkinter import *
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, scrolledtext, ttk, filedialog,END, WORD, Checkbutton
from tkinter.ttk import *
# from tkcalendar import Calendar
import os
import sys
import shutil
import urllib.parse
import threading
import datetime
import subprocess
from concurrent.futures import ProcessPoolExecutor
from numpy import concatenate, array, genfromtxt
from functools import partial
import json
from re import sub
cwd = os.getcwd()

DaveArticleScraperDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

if DaveArticleScraperDir != r"C:\Users\aglis\Documents\Python_Projects\GmailGlyphilator":
    # print('rerouted DaveArticleScraperDir')
    DaveArticleScraperDir = cwd

sys.path.append(DaveArticleScraperDir)



from glyphilator import wordlists_from_folder,constructBasicGlyphs,searchlist_from_txtFile,generateGlyphInput,generateGlyphInput_CSV
from pubmedFetcher import pubmedResults
from paragraphParser import articleParse,txtFileParse
# from asyncPubmedFetcher import pubmedResultsAsync
import gmailFetcher



############################################################################################################
#GLOBAL VARIABLES
############################################################################################################

OUTPUT_PATH = pathlib.Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / os.path.join(cwd, 'build', "assets" ,"frame0")

scopes = ['https://www.googleapis.com/auth/gmail.readonly']


wordlist_paths = {
    '.!button3': os.path.join(DaveArticleScraperDir,"wordlists","group_1"),
    '.!button4': os.path.join(DaveArticleScraperDir,"wordlists","group_2"),
    '.!button5': os.path.join(DaveArticleScraperDir,"wordlists","group_3"),
    '.!button6': os.path.join(DaveArticleScraperDir,"wordlists","group_4"),
    '.!button7': os.path.join(DaveArticleScraperDir,"wordlists","group_5"),
    '.!button8': os.path.join(DaveArticleScraperDir,"wordlists","group_6"),
    '.!button9': os.path.join(DaveArticleScraperDir,"wordlists","group_7")

}
subjects = []
service = None
most_recent_wordlist_used = None
nonscaled_allGlyphData_dict = None
glyphDataCounts = None
current_wordlist_folder = wordlist_paths[".!button3"]
last_button_clicked = None #{'button': None}
pubmed_search_url = None
custom_url_searchlist = None
final_wordlists = None
final_articleData = None
num_results_requested = 200

search_metadata = {
                                            "subject_string":"Google Alert: sample subject",
                                            "dateRange":{"startDate":None,"endDate":None,"newerThan":"Today"},
                                            "rest_api_query":"Subject:Google Alert",
                                            "headless_browser": True,
                                            "geometrySelection": "Toroid",
                                            "wordlist_paths" : ["path/to/WL1.txt","path/to/WL2.txt","path/to/WL3.txt"],
                                            "search_fuzziness":0.6,
                                            "search_string": "sample string",
                                            "num_results_requested": 200,
                                            "scaling_range": (0.2,2.5),
                                            "scaling_type": "minmax",
                                            "scaling_scope":"dataset", #determines if glyphs scaling is relative to max and min of whole dataset, or just 1 glyph.
                                            "scaling_wrt_wordlist":"total", #options ["total","percent","boolean"]
                                            "save_matched_words":False,
                                            "protos_save_path":"path/to/antz/save/dir",
                                            "uploaded_articledata_path":"None",
                                            "scale_method":"wordlist", #options ["wordlist","csv"] depending on what files are being processed
                                            "csv_path":"path/to/csv.csv",
                                            "csv_headerFlags":[True,True],#csv_headerflags determines if the [first row, first column] of csv dataset are identifiers or tags as opposed to data
                                            "csv_heightcolumn":"None"} 
############################################################################################################
# Definitions
############################################################################################################
class RedirectText:
    def __init__(self, widget):
        self.widget = widget

    def write(self, string):
        # Write to the ScrolledText widget
        self.widget.insert(END, string)
        self.widget.yview(END)  # Auto-scroll to the bottom
        
        # Also write to the terminal
        sys.__stdout__.write(string)  # This sends the output to the terminal

    def flush(self):
        # Flush is required for compatibility
        pass

def relative_to_assets(path: str) -> pathlib.Path:
    return ASSETS_PATH / pathlib.Path(path)

def button_click(button, button_image, button_selected_image):
    global last_button_clicked
    
    # Reset previous button if one was clicked before
    if last_button_clicked != None:
        last_button_clicked['button'].config(image=last_button_clicked['image'])
        
    
    # Update current button to highlighted state
    button.config(image=button_selected_image)
    last_button_clicked = {'button': button, 'image': button_image}  # Update tracking
    
    return None

def list_txt_files_in_folder(filepath):
    files = os.listdir(filepath)
    

    list_txt_filepaths = []
    for file in files:
        if file.endswith('.txt'):
            list_txt_filepaths.append(filepath + r"\\" + file)
    
    listNames = []
    for path in list_txt_filepaths:
        listNames.append(os.path.basename(path))

    str_listNames = "\n".join(listNames)
    
    return str_listNames

def display_current_wordlist():
     
    global current_wordlist_folder
    global max_scale
    global min_scale

    #first clear scrollable text window
    wordlistsScrollable.delete("1.0", END)

    if last_button_clicked == None:
        return
    
    key = str(last_button_clicked["button"])
    

    current_wordlist_folder = wordlist_paths[key]
    stringTxtFiles = list_txt_files_in_folder(current_wordlist_folder)

    wordlistsScrollable.insert(INSERT,stringTxtFiles)

    #pre-setting recommended max scaling value
    fileCount = len(os.listdir(current_wordlist_folder))

    x = fileCount
    scalingDict = {"Sphere":(19*x**2)/(x**3),
                   "Cube":(19*x**2)/(x**3),
                   "Octahedron":(19*x**2)/(x**3),
                   "Toroid": (19*x**2)/(x**3)
                   }

    max_scale.delete(0,END)
    max_scale.insert(0,scalingDict[geometryDropdown.get()])

def upload_to_group():
    global upload_filepath

    #asking user for filepaths to the files they want to upload
    upload_filepaths = filedialog.askopenfilenames(initialdir=cwd)
    
    #copying each uploaded file into current group directory
    for file in upload_filepaths:
        shutil.copy(file,current_wordlist_folder)

    #updating the group to accurately describe updated wordlists.
    display_current_wordlist()

def delete_from_group():
    to_delete_filepaths = filedialog.askopenfilenames(initialdir=current_wordlist_folder, title="Select file(s) to delete from group")
    for file in to_delete_filepaths:
        os.remove(file)
    display_current_wordlist()
    
def count_articleData_words():
    global search_metadata
    global final_articleData
    global nonscaled_allGlyphData_dict
    global glyphDataCounts
    final_wordlists = wordlists_from_folder(current_wordlist_folder)
    list_txt_filepaths = [str(path) for path in pathlib.Path(current_wordlist_folder).rglob("*")] #copying current wordlist paths in there so it doesnt break saving. will get overwritten with viz paths when viz created
    search_metadata["wordlist_paths"] = list_txt_filepaths
    
    nonscaled_allGlyphData_dict,glyphDataCounts = generateGlyphInput(final_articleData,final_wordlists,search_metadata)
    if search_metadata["save_matched_words"] == True:
        pass #

    #Saving wordcounts to file
    current_wordlist = os.path.basename(current_wordlist_folder)
    print("saving wordcounts to Json...")
    folder_date = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    date_noDash = str(datetime.datetime.now().strftime('%Y%m%d'))
  
    current_time = datetime.datetime.now().strftime('%H%M%S')
    invalid_chars = r'[<>:"/\\|?*]'

    saved_wordcount_dir_name = folder_date + "T"+ current_time + "_" + current_wordlist
    saved_wordcount_dir_name = sub(invalid_chars,"-",saved_wordcount_dir_name)
    artdata_dir = search_metadata["uploaded_articledata_path"]
    saved_wordcount_dir_path = os.path.join(artdata_dir,saved_wordcount_dir_name)
    saved_wordcount_file_path = os.path.join(saved_wordcount_dir_path,"wordcount.json")
    os.makedirs(saved_wordcount_dir_path,exist_ok=True)
    # print("wordlist_paths = ",search_metadata["wordlist_paths"])
    saved_data = [nonscaled_allGlyphData_dict,search_metadata]
    with open(saved_wordcount_file_path,"w") as file:
        json.dump(saved_data,file)
    print("wordcount file saved")

    # antzfile.to_csv(os.path.join(time_directory_path,'csv',"articleScraperOutput_np_node.csv"),index=False,encoding="utf-8")
    # tagfile.to_csv(os.path.join(time_directory_path,'csv',"articleScraperOutput_np_tag.csv"),index=False,encoding="utf-8")

def create_viz():
    global scaled_allGlyphData
    global glyphDataCounts
    print("Creating Glyphs")
    # print("glyphDataCounts = ", glyphDataCounts)
        #create a new directory each time the button is pressed, storing the new viz
    folder_date = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    date_noDash = str(datetime.datetime.now().strftime('%Y%m%d'))
  
    current_time = datetime.datetime.now().strftime('%H%M%S')
    
    date_directory_path = os.path.join(cwd,'antz','antz','User','Prototypes', folder_date)
   
     #making the date directory in antz/user/prototypes
    try:
        os.mkdir(date_directory_path)
    except OSError:
        pass
    time_directory_name = "proto-" + date_noDash + "T" + current_time
    time_directory_path = os.path.join(date_directory_path,time_directory_name)
    
    #saving the path of where we're saving stuff to access while we're generating tags
    search_metadata["protos_save_path"] = time_directory_path

    #making the time directory
    os.mkdir(time_directory_path)
    directory1 = pathlib.Path(os.path.join(cwd,"antz","antz", "User", "Prototypes", "0_DO_NOT_DELETE", "articleScraperOutput"))

    for file in directory1.rglob("*"):

        destination = time_directory_path / file.relative_to(directory1)

        if file.is_file():
            # Ensure parent directory exists in destination, then copy the file
            destination.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy(file, destination)
        elif file.is_dir():
            # Ensure the directory exists in the destination
            destination.mkdir(parents=True, exist_ok=True)

    

    #  collecting metadata related to search. 
    # # Copying Wordlists into folder
    wordlist_destination = os.path.join(time_directory_path,"search_metadata","wordlists")
    os.makedirs(wordlist_destination,exist_ok=True) 
    for file in pathlib.Path(current_wordlist_folder).rglob("*"):
        shutil.copy(file,wordlist_destination)

    antz_base_path = os.path.join(cwd, "antz", "antz")

    wordlists = os.listdir(current_wordlist_folder) # i need to copy the paths this way because thats how i make the wordlists in glyphilator function. Dont wanna risk pathlib putting wordlists out of order
    list_txt_filepaths = []
    for file in wordlists:
        if file.endswith('.txt'):
            wordlist_abs_path = wordlist_destination + r"\\" + file
            list_txt_filepaths.append(os.path.relpath(wordlist_abs_path,antz_base_path))
    
    #copying the custom url searchlist txt file into the wordlist destination folder, and setting search_metadata["search_string"] to point to the copied url
    
    if search_metadata["uploaded_articledata_path"] != "wordcounts_thru_upload": #check to see if any data was uploaded by
        search_metadata["subject_string"] = newsAlertDropdown.get()
        search_metadata["wordlist_paths"] = list_txt_filepaths
    # search_metadata["custom_list_file_paths"] = list_custom_files_paths
    # if custom_url_searchlist == None: search_metadata['search_string'] = [entry_1.get()] #THIS INFO WAS ASSIGNED WHEN SEARCH CONFIRM BUTTON CLIckEd AND when URL SEARCHLIST UPLOADED
    # if custom_url_searchlist != None: search_metadata['search_string'] = ["Used URL Searchlist", url_searchlist_textbox.get()]
    search_metadata["geometrySelection"] = geometryDropdown.get()
    # search_metadata["num_results_requested"] = num_results_requested
    search_metadata["scaling_range"] = (float(max_scale.get())/(6),float(max_scale.get())) #min scale is 1/6 the max scale
    # print(search_metadata["scaling_range"])
    
    # print("allglyphdatadict = ", nonscaled_allGlyphData_dict)

    # print('generating antz and tag file. \n Initializing parallel processing')
    antzfile,tagfile = constructBasicGlyphs(articleData=final_articleData,nonScaledAllGlyphData_dict=nonscaled_allGlyphData_dict,glyphDataWordcounts=glyphDataCounts, wordlists=final_wordlists,search_metadata=search_metadata)
    antzfile.to_csv(os.path.join(time_directory_path,'csv',"articleScraperOutput_np_node.csv"),index=False,encoding="utf-8")
    tagfile.to_csv(os.path.join(time_directory_path,'csv',"articleScraperOutput_np_tag.csv"),index=False,encoding="utf-8")

def open_in_antz():

    all_date_dirs = os.listdir(os.path.join(cwd,'antz','antz','User','Prototypes'))
    # print(all_date_dirs)

    most_recent_date = all_date_dirs[-1]
    all_time_dirs = os.listdir(os.path.join(cwd,'antz','antz','User','Prototypes',most_recent_date))
    
    most_recent_time = all_time_dirs[-1]

    bat_file_path = os.path.join(cwd,'antz','antz','User','Prototypes',most_recent_date,most_recent_time,'articleScraperOutput_npe.bat')
    # print(bat_file_path)
    subprocess.Popen(bat_file_path,shell=True,cwd=pathlib.Path(bat_file_path).parent)
    # try:
    #     os.startfile(bat_file_path)
    # except:
    #     subprocess.Popen(bat_file_path)
    #     print('operation on non-windows OS not yet supported')

def change_glyph_geo_selection(event):
    global search_metadata

    search_metadata["geometrySelection"] = geometryDropdown.get()
    print("Glyph geometry changed to", search_metadata["geometrySelection"])

def add_to_searchlist_txt():
    global custom_url_searchlist
    if custom_url_searchlist == None:
        print("Please select a searchlist before attempting to add paths to it")
        return
    filepaths_list = filedialog.askopenfilenames()
    # print(filepaths_list)
    # for path in filepaths_list:
    
    with open(url_searchlist_textbox.get(),"a") as file:
        for path in filepaths_list:
            if path.endswith(".txt"):
                writestring = "\n" + path
                file.write(writestring)
            else:
                print("File not added: Not a .txt file: ",os.path.basename(path))
    
    url_list_path = url_searchlist_textbox.get()
    custom_url_searchlist = searchlist_from_txtFile(url_list_path)
    print("Found URL or Filepath:", len(custom_url_searchlist))
    
def change_subject_selection(event):
    print("Alert Subject Changed to:",newsAlertDropdown.get())
    search_metadata["subject_string"] = newsAlertDropdown.get()
    
def generate_api_query(search_metadata):
    
    
    query = "subject:" + search_metadata["subject_string"]
    if "Fwd" not in search_metadata["subject_string"]:
        query = query + ' -subject:"Fwd"'

    if search_metadata["dateRange"]["newerThan"] != None:
        newerthanDict = {"Today":"1d","Last 2 Days":"2d","Last 3 Days":"3d","Last Week":"7d"}
        query = query + " " + "newer_than:" + newerthanDict[search_metadata["dateRange"]["newerThan"]]
    
    if search_metadata["dateRange"]["startDate"] != None:# and search_metadata["dateRange"]["newerThan"] == None
        query = query + " " + "after:" + search_metadata["dateRange"]["startDate"]

    if search_metadata["dateRange"]["endDate"] != None:# and search_metadata["dateRange"]["newerThan"] == Non
        query = query + " " + "before:" + search_metadata["dateRange"]["endDate"]

    return query
    
def select_dates(choosingStartDate):
    global calendar_window
    
    try:
        calendar_window.deiconify()
    except:
        # print("making new cal window")
        calendar_window = Toplevel(window)
        calendar_window.geometry("300x300")
        calendar_window.title("Calendar")
        
        cal = tkcalendar.Calendar(calendar_window, selectmode = "day")
        cal.pack(pady=20)
        # calendar_window.withdraw()
    def convert_date_format(date):
        month, day, year = date.split("/")
        dateFinal = month + "/" + day + "/" + "20" + year
        return dateFinal

    def on_date_selected(event):
        date = cal.get_date()
        if choosingStartDate == True:
            print("starting date is",date)
            search_metadata["dateRange"]["startDate"] = convert_date_format(date)
            calendar_window.destroy()
            
        if choosingStartDate == False:
            print("ending date is:", date)
            search_metadata["dateRange"]["endDate"] = convert_date_format(date)
            calendar_window.destroy()
        
        search_metadata["dateRange"]["newerThan"] = None
            
    try:
        cal.bind("<<CalendarSelected>>", on_date_selected)
    except UnboundLocalError:
        return

    return

def select_newer_than(event):
    global timeDropDown
    search_metadata["dateRange"]["newerThan"] = timeDropDown.get()
    search_metadata["dateRange"]["startDate"] = None
    search_metadata["dateRange"]["endDate"] = None
    print("Dates: Newer than", search_metadata["dateRange"]["newerThan"])

def retrieve_gmail_articles():
    global service
    global final_articleData
    search_metadata["subject_string"] = newsAlertDropdown.get()
    query = generate_api_query(search_metadata)
    print("gmail query = ", query)
    messages = gmailFetcher.fetchNewsAlerts(service,query,maxResults=200)
    final_links = []
    print("Matched emails to search criteria: ",len(messages))
    for message in messages:
        html = gmailFetcher.extract_html(message,service)
        links = gmailFetcher.extractUrl(html)
        for link in links:
            final_links.append(link)
    
    # links = ['https://www.google.com/url?rct=j&sa=t&url=https://www.auntminnie.com/imaging-informatics/artificial-intelligence/article/15712005/ge-healthcare-ai-will-transform-early-cancer-detection-save-lives-in-2025&ct=ga&cd=CAEYFioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3GwlwbTwK2Y4_7YQJImmWB', 'https://www.google.com/url?rct=j&sa=t&url=https://www.mitsui.com/mgssi/en/report/detail/__icsFiles/afieldfile/2025/01/14/2411_i_kinoshita_e.pdf&ct=ga&cd=CAEYECoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0F5A22HLRXzI51AR6dR36C', 'https://www.google.com/url?rct=j&sa=t&url=https://www.frontiersin.org/journals/radiology/articles/10.3389/fradi.2024.1433457/pdf&ct=ga&cd=CAEYECoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw19VxnEzZecVfdU7fAOnf8y', 'https://www.google.com/url?rct=j&sa=t&url=https://www.mobihealthnews.com/news/exclusive-century-heath-nira-medical-partner-provide-ai-curated-ehr-data&ct=ga&cd=CAEYGSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0sOynneAyAICuMEcDH4OmJ', 'https://www.google.com/url?rct=j&sa=t&url=https://ascopost.com/news/january-2025/ai-may-enhance-cervical-cancer-detection/&ct=ga&cd=CAEYGioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2CmvuA_Y2z--VGULJC0WFj', 'https://www.google.com/url?rct=j&sa=t&url=https://www.drugdiscoverytrends.com/nvidia-allies-with-iqvia-mayo-clinic-and-illumina-on-healthcare-ai/&ct=ga&cd=CAEYGyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3kTAIVs-Nt6CiGxuVFuSaC', 'https://www.google.com/url?rct=j&sa=t&url=https://councils.forbes.com/blog/ai-speeds-up-drug-discovery&ct=ga&cd=CAEYEyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw30Dv-A_AeqojH3hywbWXef', 'https://www.google.com/url?rct=j&sa=t&url=https://link.springer.com/article/10.1007/s43926-025-00095-8&ct=ga&cd=CAEYEyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2dwXDt4V4v2reQrYMxWr1O', 'https://www.google.com/url?rct=j&sa=t&url=https://www.news-medical.net/news/20250113/Mayo-Clinic-Digital-Pathology-aims-to-revolutionize-pathology-and-accelerate-medical-breakthroughs.aspx&ct=ga&cd=CAEYHioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2l2bfSox2aaqw4Z2NO8EOo', 'https://www.google.com/url?rct=j&sa=t&url=https://hitconsultant.net/2025/01/14/arcadia-launches-ai-powered-precision-medicine-solution/&ct=ga&cd=CAEYHyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3EgYwq0xZvD3k50EJXLgBU', 'https://www.google.com/url?rct=j&sa=t&url=https://www.aha.org/aha-center-health-innovation-market-scan/2025-01-14-how-build-and-implement-your-ai-health-care-action-plan&ct=ga&cd=CAEYICoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0PW9qwz8VrXvMKJ0pM1BzO', 'https://www.google.com/url?rct=j&sa=t&url=https://www.prnewswire.com/news-releases/annals-of-family-medicine-four-new-articles-provide-insights-and-research-results-for-ai-in-primary-care-302349718.html&ct=ga&cd=CAEYISoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2LfpJfSBgFfl_HVhXTZnTZ', 'https://www.google.com/url?rct=j&sa=t&url=https://www.medicaldesignandoutsourcing.com/mayo-clinic-nvidia-aignostics-partner-on-digital-pathology-ai-tools/&ct=ga&cd=CAEYIioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1KRLNtSTa_WOnAn4DCyO9z', 'https://www.google.com/url?rct=j&sa=t&url=https://www.youtube.com/watch%3Fv%3DdXAYH-e2FOc&ct=ga&cd=CAEYGCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw33nykaFjOnfbgV8XSkHMiQ', 'https://www.google.com/url?rct=j&sa=t&url=https://www.eurekalert.org/news-releases/1070354&ct=ga&cd=CAEYJCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0OuIttOGOS1nKlH3cVo4YY', 'https://www.google.com/url?rct=j&sa=t&url=https://www.businesswire.com/news/home/20250114031135/en/Atropos-Health-and-xCures-Advance-Artificial-Intelligence-AI-to-Improve-Clinical-Decision-Making-and-Patient-Outcomes&ct=ga&cd=CAEYJSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3JUtAP8CRVS1tLSUISWN69', 'https://www.google.com/url?rct=j&sa=t&url=https://fox40.com/business/press-releases/ein-presswire/776553808/rework-announces-ai-in-healthcare-pharma-summit-2025-in-boston-ma&ct=ga&cd=CAEYJioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3iJX6aBKAIXAo71ONCMV8-', 'https://www.google.com/url?rct=j&sa=t&url=https://www.mobihealthnews.com/news/asia/korean-medical-imaging-ai-continues-global-saturation-2025&ct=ga&cd=CAEYJyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0-HfjcNatu4DUxokJrZmA7', 'https://www.google.com/url?rct=j&sa=t&url=https://medcitynews.com/2025/01/nvidia-ai-healthcare-jpm-biopharma/&ct=ga&cd=CAEYKCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1ZQHosnq2njTzsY8xT-Yuz', 'https://www.google.com/url?rct=j&sa=t&url=https://www.wjbf.com/business/press-releases/globenewswire/1001042929/panakeia-launches-panprofiler-colon-an-ai-driven-tool-for-precision-medicine-in-colon-cancer&ct=ga&cd=CAEYKSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1SyNY69UqePq149Gte4Pbg', 'https://www.google.com/url?rct=j&sa=t&url=https://www.wjtv.com/business/press-releases/globenewswire/9329354/arcadia-enables-healthcare-providers-to-deliver-precision-medicine-at-scale&ct=ga&cd=CAEYKioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3rP4mTxXRyfPc3R0sRzHme', 'https://www.google.com/url?rct=j&sa=t&url=https://www.businesswire.com/news/home/20250114353575/en/Tempus-One-Introduces-New-GenAI-Capabilities-to-Query-Millions-of-Unstructured-Documents-for-Research-and-Clinical-Care&ct=ga&cd=CAEYKyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw07Shj1y2SFjvFUlhxG2s5h', 'https://www.google.com/url?rct=j&sa=t&url=https://www.jmir.org/2025/1/e50852&ct=ga&cd=CAEYICoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2zqJQxFxM3UWITEjj00Zsu', 'https://www.google.com/url?rct=j&sa=t&url=https://cap.csail.mit.edu/engage/spotlights/marzyeh-ghassemi&ct=ga&cd=CAEYICoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1n-wq5Y1ctrOHlZvthy8dH', 'https://www.google.com/url?rct=j&sa=t&url=https://kclpure.kcl.ac.uk/portal/en/publications/a-policy-framework-for-leveraging-generative-ai-to-address-enduri&ct=ga&cd=CAEYICoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2NBpFKImYhHqWiWjgMpChA', 'https://www.google.com/url?rct=j&sa=t&url=https://www.fiercehealthcare.com/providers/jpm25-day-2-healthcare-conference-draws-protesters-news-nvidia-tempus-ai-and-health&ct=ga&cd=CAEYLyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0wlTtgyasF-2vxjdu9KYTr', 'https://www.google.com/url?rct=j&sa=t&url=https://finance.yahoo.com/news/panakeia-launches-panprofiler-colon-ai-123000309.html&ct=ga&cd=CAEYMCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2kvUzkx-DUN2ILmrqwxvS7', 'https://www.google.com/url?rct=j&sa=t&url=https://www.globenewswire.com/news-release/2025/01/13/3008653/0/en/InveniAI-Announces-Launch-of-AlphaMeld-Corporation-and-Major-Milestone-Updates-to-Reflect-Cutting-Edge-Innovation-in-AI-Driven-Drug-Discovery.html&ct=ga&cd=CAEYMSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1G8s36T8erW3tFIpuz5JTV', 'https://www.google.com/url?rct=j&sa=t&url=https://www.chicagobusiness.com/health-pulse/tempus-ai-founder-eric-lefkofsky-touts-strong-2024-financials&ct=ga&cd=CAEYMioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw21hpB7P0uPe0mMlLhtoe-a', 'https://www.google.com/url?rct=j&sa=t&url=https://www.statnews.com/2025/01/14/jpm-dispatches-nvidia-recursion-dexcom-health-tech/&ct=ga&cd=CAEYMyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw34RJHaj8UnKpXMPUSsCJlu', 'https://www.google.com/url?rct=j&sa=t&url=https://www.konicaminolta.com/global-en/newsroom/2025/0114-01-01.html&ct=ga&cd=CAEYNCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3T6V_GDhVoKLvnxAFaljlS', 'https://www.google.com/url?rct=j&sa=t&url=https://www.globenewswire.com/news-release/2025/01/13/3008748/0/en/Medical-Speech-Recognition-Software-Market-Report-2025-Featuring-Nuance-Communications-Dolbey-Systems-Cerner-Speechmatics-Suki-AI-Athenahealth-iFLYTEK-Oracle-Vocera-Communications-.html&ct=ga&cd=CAEYNSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3W1AuImH7uHv5xI8J3BRZk', 'https://www.google.com/url?rct=j&sa=t&url=https://www.medschool.umaryland.edu/news/2025/umms-rolls-out-virtual-nest-to-support-bedside-care-teams-in-labor-and-delivery-units-across-the-system.html&ct=ga&cd=CAEYNioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2RRs9F20nh9CfU0vxiVkV4', 'https://www.google.com/url?rct=j&sa=t&url=https://www.news-medical.net/life-sciences/Market-Report-2025-Pharmaceutical-Manufacturing.aspx&ct=ga&cd=CAEYNyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2ASr8W_F8lzyulN6rA2uYd', 'https://www.google.com/url?rct=j&sa=t&url=https://news.stanford.edu/stories/2025/01/waste-reduction-a-key-defense-against-rising-dengue-cases&ct=ga&cd=CAEYOCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1cOYSMgP0sRgg5ulweG75Q', 'https://www.google.com/url?rct=j&sa=t&url=https://www.whitehouse.gov/cea/written-materials/2025/01/14/ai-talent-report/&ct=ga&cd=CAEYOSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1zRhGgCTlQ5Ha9hRrq2YU-', 'https://www.google.com/url?rct=j&sa=t&url=https://www.koreabiomed.com/news/articleView.html%3Fidxno%3D26310&ct=ga&cd=CAEYOioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2n6HkD0HvIQoTMiFxx60Rn', 'https://www.google.com/url?rct=j&sa=t&url=https://www.biospectrumasia.com/news/98/25433/hong-kong-unveils-novel-therapeutic-targets-and-drug-repurposing-opportunities-for-endometriosis.html&ct=ga&cd=CAEYOyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2mkskAuyK7Y-pOyjqD7oV-', 'https://www.google.com/url?rct=j&sa=t&url=https://www.ucf.edu/news/2-ucf-healthcare-simulation-experts-named-global-fellows/&ct=ga&cd=CAEYPCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw28dj5PxkvPv1Y5P1WISfbE', 'https://www.google.com/url?rct=j&sa=t&url=https://www.drugtargetreview.com/article/155024/scientific-workflow-for-hypothesis-testing-in-drug-discovery-part-2-of-3/&ct=ga&cd=CAEYPSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2tg5rkTSfCTSqzwnD0xqmi', 'https://www.google.com/url?rct=j&sa=t&url=https://www.miragenews.com/ai-pioneer-to-lead-ut-computational-medicine-1389891/&ct=ga&cd=CAEYPioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3LW75tBkBkHYILIyon501v', 'https://www.google.com/url?rct=j&sa=t&url=https://bioengineer.org/ai-healthcare-pioneer-to-spearhead-computational-medicine-research-at-ut/&ct=ga&cd=CAEYMCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2ZRt2ZRVNLQjbWR0r8rfXK', 'https://www.google.com/url?rct=j&sa=t&url=https://journals.plos.org/plosone/article%3Fid%3D10.1371/journal.pone.0317276&ct=ga&cd=CAEYMCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2o5fpeUg4bYf9HQFAfpXlK', 'https://www.google.com/url?rct=j&sa=t&url=https://aithority.com/machine-learning/every-cure-expands-collaboration-with-google-cloud-to-transform-ai-driven-drug-repurposing/&ct=ga&cd=CAEYQSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw31XkUjwu_TI2v-7--6flzm', 'https://www.google.com/url?rct=j&sa=t&url=https://www.youtube.com/watch%3Fv%3DwAJ7WIszJrg&ct=ga&cd=CAEYUioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1-HpnlMV6MnSO9FC4V2bZ7', 'https://www.google.com/url?rct=j&sa=t&url=https://www.frontiersin.org/research-topics/69383/integrative-ai-and-multi-omics-precision-medicine-in-immuno-inflammation&ct=ga&cd=CAEYUyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3ePgqCaSMs4h6Ht012E3yc', 'https://www.google.com/url?rct=j&sa=t&url=https://www.imprimedicine.com/blog/ai-in-pet-cancer&ct=ga&cd=CAEYVyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw2FhVwRkWv_kDcM_JLvzwJU', 'https://www.google.com/url?rct=j&sa=t&url=https://www.youtube.com/watch%3Fv%3DpoV1H-nBumk&ct=ga&cd=CAEYWCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0XrCWSdHODcl2XFMVb_1UF', 'https://www.google.com/url?rct=j&sa=t&url=https://www.sciencedirect.com/science/article/pii/S0304383525000254&ct=ga&cd=CAEYXCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw27fE2dc8_uTvJqOhrubl7P', 'https://www.google.com/url?rct=j&sa=t&url=https://www.youtube.com/watch%3Fv%3DlqoCgFQStBo&ct=ga&cd=CAEYXSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0mbEf4MNo6JMpitnYmBoJy', 'https://www.google.com/url?rct=j&sa=t&url=https://www.frontiersin.org/research-topics/69383/integrative-ai-and-multi-omics-precision-medicine-in-immuno-inflammation/impact&ct=ga&cd=CAEYXyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0GnaEtPFRKUPctE4-jAZZj', 'https://www.google.com/url?rct=j&sa=t&url=https://www.youtube.com/watch%3Fv%3D4A8cJXfBlCw&ct=ga&cd=CAEYYCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw09wBtCyFUGlnI1ptP_MGkc', 'https://www.google.com/url?rct=j&sa=t&url=https://www.cc.gatech.edu/news/ai-ai-popular-large-language-models-weigh-whats-next-ai-2025&ct=ga&cd=CAEYYyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0AkxtjIA-e_ag8NoIk4R1F', 'https://www.google.com/url?rct=j&sa=t&url=https://scholars.duke.edu/individual/pub1662523&ct=ga&cd=CAEYZioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3QuhHTbx94s2tTlFL2yIyO', 'https://www.google.com/url?rct=j&sa=t&url=https://durslt.du.ac.in/video/Typing-for-AI-in-precision-medicine-development.htm&ct=ga&cd=CAEYaCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0OhTiHy7NrTwLv9Zp-3vNX', 'https://www.google.com/url?rct=j&sa=t&url=https://www.mdpi.com/2227-7080/13/1/34/review_report&ct=ga&cd=CAEYaSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0kShdWcj7FhPV-rqOUEDv5', 'https://www.google.com/url?rct=j&sa=t&url=https://durslt.du.ac.in/video/AI-in-Personalized-Medicine-Solutions.shtm&ct=ga&cd=CAEYaioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1QC9QNi7qScR78Ieptoe3k', 'https://www.google.com/url?rct=j&sa=t&url=https://durslt.du.ac.in/video/AI-for-Personalized-Medicine-Recommendations.html&ct=ga&cd=CAEYbCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw0axvWBCVHiqki5V-8Xrz0j', 'https://www.google.com/url?rct=j&sa=t&url=https://www.yalemedicine.org/events/virtual-tai-chi-qigong-hosted-by-smilow-integrative-medicine-1-252&ct=ga&cd=CAEYbioUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3UBwFSLcUscfn3EW2DSlgX', 'https://www.google.com/url?rct=j&sa=t&url=https://www.mdpi.com/2227-7080/13/1/34/notes&ct=ga&cd=CAEYbyoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3oDUN7FvJqRWDB5X6V3yNN', 'https://www.google.com/url?rct=j&sa=t&url=https://www.insideprecisionmedicine.com/%3Fblackhole%3D456a37d6d0%26__hstc%3D126276562.187deb778a9f930376dabe6a7a68cca6.1736830800301.1736830800302.1736830800303.1%26__hssc%3D126276562.1.1736830800304%26__hsfp%3D2642962875&ct=ga&cd=CAEYcCoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw3kix5A51s57VF92AjapUSE', 'https://www.google.com/url?rct=j&sa=t&url=https://orangeslices.ai/contract-award-dha-walter-reed-national-military-medical-center-data-analyst-support-services/&ct=ga&cd=CAEYcSoUMTc2NTAxMDM2OTc4MDc5MjgwNzAyGmU2ZGY0ZjAyYTg1NzhlZmQ6Y29tOmVuOlVT&usg=AOvVaw1MbtrATD-wnIJaCZpDiUSU']    # print(len(links),"links found in subject:", search_metadata["subject_string"])
    
    final_articleData = []

    cpu_count = os.cpu_count()
    desired_cpu_count = cpu_count
    print("cpuCount = ", cpu_count,"| worker_count = ", desired_cpu_count)

    partial_articleParse = partial(articleParse, method = 1, search_metadata = search_metadata)
    with ProcessPoolExecutor(max_workers=desired_cpu_count) as executor:
        result = list(executor.map(partial_articleParse,final_links))
    print("Article collection complete")
    print("Num found articles = ",len(result))
    final_articleData = result

    #autosaving final_articledata to json
    print("autosaving articles to Json...")
    folder_date = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    date_noDash = str(datetime.datetime.now().strftime('%Y%m%d'))
  
    current_time = datetime.datetime.now().strftime('%H%M%S')
    invalid_chars = r'[<>:"/\\|?*]'

    saved_artData_dir_name = folder_date + "T"+ current_time + "_" + search_metadata["subject_string"] + "_ "+ "articlecount=" + str(len(final_articleData))
    saved_artData_dir_name = sub(invalid_chars,"-",saved_artData_dir_name)
    
    artData_directory_path = os.path.join(cwd,'autosaved_data', saved_artData_dir_name)
    artdata_json_path = os.path.join(artData_directory_path, "articleData.json")
    os.makedirs(artData_directory_path, exist_ok=True)
    with open(artdata_json_path,"w") as file:
        json.dump(final_articleData,file)
    search_metadata["uploaded_articledata_path"] = artData_directory_path
    print("article data saved to directory:")
    print(artData_directory_path)

def google_sign_in():
    global subjects
    global service
    scopes = ['https://www.googleapis.com/auth/gmail.readonly']
    try:
        service = gmailFetcher.authenticate(scopes)
        subjects = gmailFetcher.subject_fetcher(service)
        # print("subjects = ",subjects)
        newsAlertDropdown['values'] = subjects
        newsAlertDropdown.delete(0,END)
        newsAlertDropdown.insert(0,subjects[0])
    except:
        print("Session token expired. Please Sign out,\n then sign in again.")
    
    # newsAlertDropdown = ttk.Combobox(values = subjects)
    # newsAlertDropdown.place(x=50, y=110, height=26, width=200)
    # newsAlertDropdown.bind("<<ComboboxSelected>>", change_subject_selection)
    # newsAlertDropdown.insert(0,subjects[0])

def google_sign_out():
    token_path = os.path.join(cwd,"auth\\token.json")
    try:
        os.remove(token_path)
        print("Signed Out.")
    except FileNotFoundError:
        print("not signed in")

def change_headless_selection(event):
    global headlessDropdown
    if headlessDropdown.get() == "Don't Show Browser":
        search_metadata["headless_browser"] = True
        print("Not showing Broswers")
    else:
        search_metadata["headless_browser"] = False
        print("showing browsers")

def change_wordlist_scaling_selection(event):
    global wordlistScalingDropdown

    if wordlistScalingDropdown.get() == "Total Wordcount":
        search_metadata["scaling_wrt_wordlist"] = "total"

    if wordlistScalingDropdown.get() == "% Wordlist":
        search_metadata["scaling_wrt_wordlist"] = "percent"
        
    if wordlistScalingDropdown.get() == "Boolean Wordcount":
        search_metadata["scaling_wrt_wordlist"] = "boolean"
    
    print("Wordlist scaling changed to:", search_metadata["scaling_wrt_wordlist"])

def upload_articleData_json():
    global final_articleData
    print("upload articleData button pressed")
    articleData_filepath = filedialog.askopenfilename(initialdir=os.path.join(cwd,"autosaved_data"))
    try:
        with open(articleData_filepath,"r") as file:
            final_articleData = json.load(file)
        search_metadata["uploaded_articledata_path"] = os.path.dirname(articleData_filepath)
        print("ArticleData JSON loaded.")
    except:
        print("ArticleData JSON load failed.")
        pass

def upload_wordcount_json():
    global nonscaled_allGlyphData_dict
    global final_articleData
    global search_metadata
    
    print("upload wordcount json pressed")
    wordcount_filepath = filedialog.askopenfilename(initialdir=os.path.join(cwd,"autosaved_data"))
    articleData_filepath = os.path.join(os.path.dirname(os.path.dirname(wordcount_filepath)),"articleData.json")
    
    try:
        with open(wordcount_filepath,"r") as file:
            loaded_data = json.load(file)
            #checking if structure is correct by checking a few values that should be present in every load
            nonscaled_allGlyphData_dict = loaded_data[0]
            search_metadata = loaded_data[1]
            search_metadata["uploaded_articledata_path"] = "wordcounts_thru_upload" #setting flag so that it doesnt get overwritten at viz creation
        with open(articleData_filepath,"r") as file:
            final_articleData = json.load(file)
        print("len wordlists_used = ",len(nonscaled_allGlyphData_dict["total"][0]))

    except:
        print("Wordcount(allglyphdata) JSON load failed.")
        pass
    
#Old Features Ported Forward
def extraBSWindow():
    global entry_1
    global url_searchlist_textbox
    global requested_results_text
    global tkColHeaderVar
    global tkRowHeaderVar
    global dropdown_heightcolumnSelector

    bsWindow = Toplevel(window)
    bsWindow.title("Custom List & Pubmed")
    bsWindow.geometry("655x655")
    bsWindow.configure(bg = "#1C375E")
    # bsWindow.wm_attributes("-topmost", True)
    bsCanvas = Canvas(
        bsWindow,
        bg = "#1C375E",
        height = 655,
        width = 655,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )
    bsCanvas.place(x=0,y=0)

    bsCanvas.create_text(30,10,text="Custom Searchlist",anchor="nw",fill="#FFFFFF",font=("Inter", 20 * -1))
    url_searchlist_textbox = Entry(bsWindow)
    url_searchlist_textbox.place(x=30,y=50,width=250,height=26)

    

    button_upload_url_list = Button(bsWindow, text="Upload \n Searchlist", command=upload_url_list)
    button_upload_url_list.place(x=30, y=78, width=70, height=38)

    button_add_to_searchlist = Button(bsWindow,text="Browse \n Files",command=add_to_searchlist_txt)
    button_add_to_searchlist.place(x=110, y=78, width=70, height=38)

    button_collect_searchlist_data = Button(bsWindow,text="Collect Searchlist Data",command= lambda: (threading.Thread(target=collect_custom_searchlist).start()))
    button_collect_searchlist_data.place(x=30, y=120, width=150, height=38)

    bsCanvas.create_text(350,10,text="Pubmed Search", anchor="nw",fill="#FFFFFF",font=("Inter", 20 * -1))
    bsCanvas.create_text(500,10,text="Num Results \n Requested < 200", anchor="nw",fill="#FFFFFF",font=("Inter", 12 * -1))
    entry_1 = Entry(bsWindow)
    entry_1.place(x=350,y=50,width=210,height=26)

    requested_results_text = Entry(bsWindow)
    requested_results_text.place(x=560,y=50,width=50,height=26)
    requested_results_text.insert(0,"20")

    button_confirm_pmed_search = Button(bsWindow,text="Confirm \n Search", command=confirm_pubmed_search)
    button_confirm_pmed_search.place(x=350, y=78, width=70, height=38)

    button_execute_pmed_search = Button(bsWindow,text="Execute \n Search", command=lambda: (threading.Thread(target=search_pubmed).start()))
    button_execute_pmed_search.place(x=425, y=78, width=70, height=38)

    #custom csv widgets & options
    bsCanvas.create_text(30,230,text="Custom CSV",anchor="nw",fill="#FFFFFF",font=("Inter", 20 * -1))

    button_upload_csv = Button(bsWindow, text="Upload \n CSV", command=upload_csv)
    button_upload_csv.place(x=30, y=300, width=70, height=38)

    button_collect_csv_data = Button(bsWindow,text=" Collect\nCSV Data",command=collect_csv_data)
    button_collect_csv_data.place(x=110, y=300, width=70, height=38)

    
    tkRowHeaderVar = BooleanVar(value=1)
    checkbox_csv_columnnames = ttk.Checkbutton(bsWindow,text="first row header",variable=tkRowHeaderVar,onvalue=1,offvalue=0,command=checkbox_clicked)
    checkbox_csv_columnnames.place(x=30, y=255)
    
    tkColHeaderVar = BooleanVar(value=1)
    checkbox_csv_rownames = ttk.Checkbutton(bsWindow, text = "first column header",variable=tkColHeaderVar,onvalue=1,offvalue=0,command=checkbox_clicked)
    checkbox_csv_rownames.place(x=30, y=275)

    bsCanvas.create_text(30,355,text="Column for Height Placement",anchor="nw",fill="#FFFFFF",font=("Inter", 12 * -1))
    dropdown_heightcolumnSelector = ttk.Combobox(bsWindow,values=search_metadata["csv_heightcolumn_vals"])
    dropdown_heightcolumnSelector.place(x=30, y=370, width=150, height=26)
    dropdown_heightcolumnSelector.insert(0,"None")

def upload_url_list():
    global custom_url_searchlist
    global pubmed_search_url
    global num_results_requested
    global search_metadata
    
    #generating custom url searchlist, find path, parse the txt, and assign to custom_url_searchlist
    url_list_path = filedialog.askopenfilename()
    custom_url_searchlist = searchlist_from_txtFile(url_list_path)
    url_searchlist_textbox.config(state='normal')
    url_searchlist_textbox.delete(0,END)
    # url_searchlist_textbox.insert(INSERT,os.path.basename(url_list_path))
    url_searchlist_textbox.insert(INSERT,url_list_path)
    url_searchlist_textbox.config(state='readonly')
    
    #global search string # gotta delete any data that may be in the manual searchbar
    # entry_1.delete(0,END)
    pubmed_search_url = None #delete the url that was generated as part of confirm_pubmed_search as well
    num_results_requested = None

    #uploading search_metadata["search_string"] with path of the url list
    search_metadata["search_string"] = url_list_path
    print("Found URL or Filepath:", len(custom_url_searchlist))

def add_to_searchlist_txt():
    global custom_url_searchlist
    if custom_url_searchlist == None:
        print("Please select a searchlist before attempting to add paths to it")
        return
    filepaths_list = filedialog.askopenfilenames()
    # print(filepaths_list)
    # for path in filepaths_list:
    
    with open(url_searchlist_textbox.get(),"a") as file:
        for path in filepaths_list:
            if path.endswith(".txt"):
                writestring = "\n" + path
                file.write(writestring)
            else:
                print("File not added: Not a .txt file: ",os.path.basename(path))
    
    url_list_path = url_searchlist_textbox.get()
    custom_url_searchlist = searchlist_from_txtFile(url_list_path)
    print("Found URL or Filepath:", len(custom_url_searchlist))

def collect_custom_searchlist():
    global custom_url_searchlist
    global final_articleData
    global search_metadata

    final_articleData = []
    # print("custom_url_searchlist = ", custom_url_searchlist)
    for url in custom_url_searchlist:
        if os.path.exists(url) == True: #if the string is a filepath, parse it like txt file
            txtfiledata = txtFileParse(url)
            final_articleData.append(txtfiledata)
            print("text file processed")
            continue
        urlData = articleParse(url,method=0,search_metadata=search_metadata)
        final_articleData.append(urlData)
        print("url processed")

    print("done. All media data collected")
    print("autosaving articles to Json...")
    folder_date = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    date_noDash = str(datetime.datetime.now().strftime('%Y%m%d'))
  
    current_time = datetime.datetime.now().strftime('%H%M%S')
    invalid_chars = r'[<>:"/\\|?*]'

    
    saved_artData_dir_name = folder_date + "T"+ current_time + "_" + "custom_searchlist" + "_ "+ "articlecount=" + str(len(final_articleData))
    saved_artData_dir_name = sub(invalid_chars,"-",saved_artData_dir_name)
    
    artData_directory_path = os.path.join(cwd,'autosaved_data', saved_artData_dir_name)
    artdata_json_path = os.path.join(artData_directory_path, "articleData.json")
    os.makedirs(artData_directory_path, exist_ok=True)
    with open(artdata_json_path,"w") as file:
        json.dump(final_articleData,file)
    search_metadata["uploaded_articledata_path"] = artData_directory_path
    print("article data saved to directory:")
    print(artData_directory_path)

def confirm_pubmed_search():
    global custom_url_searchlist #gptta delete any data relevant to custom URL searchlisting
    global pubmed_search_url
    global num_results_requested
    global search_metadata
    global requested_results_text
    global url_searchlist_textbox
    global entry_1

    
    num_results_requested = int(requested_results_text.get())
    print("num resulst req = ", num_results_requested)
    search_string = entry_1.get()
    
    #deleting data related to custom URL list searching. Cant search both ways! ....YET
    custom_url_searchlist = None
    url_searchlist_textbox.config(state='normal')
    url_searchlist_textbox.delete(0,END)
    url_searchlist_textbox.config(state='readonly')

    #generating pubmed url
    search_words = search_string.split()
    
    
    url_search_words = []
    for word in search_words:
        url_search_words.append(urllib.parse.quote(word))

    start_url = "https://pubmed.ncbi.nlm.nih.gov/?term="    
    middle_url = '+'.join(url_search_words)
    end_url = "&size=200"

    pubmed_search_url = start_url + middle_url + end_url

    #updating search_metadata with the search string
    search_metadata["search_string"] = search_string

    print("search string = ",search_metadata["search_string"])

def search_pubmed():
    global final_articleData
    global search_metadata
    final_articleData = pubmedResults(pubmed_search_url,num_results_requested)
    print("Done. All Pubmed Articles Retrieved")
    
    print("autosaving articles to Json...")
    folder_date = str(datetime.datetime.now().strftime('%Y-%m-%d'))
    date_noDash = str(datetime.datetime.now().strftime('%Y%m%d'))
  
    current_time = datetime.datetime.now().strftime('%H%M%S')
    invalid_chars = r'[<>:"/\\|?*]'

    print("subject_string pre-save = ",search_metadata["search_string"])
    saved_artData_dir_name = folder_date + "T"+ current_time + "_" + search_metadata["search_string"] + "_ "+ "articlecount=" + str(len(final_articleData))
    saved_artData_dir_name = sub(invalid_chars,"-",saved_artData_dir_name)
    
    artData_directory_path = os.path.join(cwd,'autosaved_data', saved_artData_dir_name)
    artdata_json_path = os.path.join(artData_directory_path, "articleData.json")
    os.makedirs(artData_directory_path, exist_ok=True)
    with open(artdata_json_path,"w") as file:
        json.dump(final_articleData,file)
    search_metadata["uploaded_articledata_path"] = artData_directory_path
    print("article data saved to directory:")
    print(artData_directory_path)

def upload_csv():
    global search_metadata
    global dropdown_heightcolumnSelector

    csv_filepath = filedialog.askopenfile()
    search_metadata["csv_path"] = csv_filepath
    search_metadata["search_string"] = os.path.basename(str(csv_filepath))
    search_metadata["subject_string"] = os.path.basename(str(csv_filepath))
    print("CSV uploaded from filepath: \n", csv_filepath)

    #read first row of csv
    csv_array = genfromtxt(csv_filepath, delimiter=",",missing_values="",filling_values=0,skip_header=False,encoding="utf-8",dtype=str)
    csv_heightcolumn_vals = ["None"]
    
    if search_metadata["csv_headerFlags"][0] == True:
        if search_metadata["csv_headerFlags"][1] == True: #if the first column is not data, we dont want to include it in columnNames
            columnNames = csv_array[0,1:]
        if search_metadata["csv_headerFlags"][1] == False:
            columnNames = csv_array[0,:]
        for string in columnNames:
            csv_heightcolumn_vals.append(string)
            # print("appending string", string)

    if search_metadata["csv_headerFlags"][0] == False:

        if search_metadata["csv_headerFlags"][1] == True: #if the first column is not data, we dont want to include it in columnNames
            numColumns = len(csv_array[0,1:])
            
        if search_metadata["csv_headerFlags"][1] == False:
            numColumns = len(csv_array[0,:])
        
        for i in range(0,numColumns):
            string = "Column_" + str(i+1)
            csv_heightcolumn_vals.append(string)
    
    # print(search_metadata["csv_heightcolumn_vals"])
    dropdown_heightcolumnSelector["values"] = csv_heightcolumn_vals

def collect_csv_data():
    global final_articleData
    global search_metadata
    global nonscaled_allGlyphData_dict

    csv_filepath = search_metadata["csv_path"]
    search_metadata["scale_method"] = "csv"
    search_metadata["uploaded_articledata_path"] = "wordcounts_thru_upload"

    nonscaled_allGlyphData_dict, articleData, search_metadata = generateGlyphInput_CSV(csv_filepath,search_metadata=search_metadata)
    final_articleData = articleData
    # print("wordlist_paths = ",search_metadata["wordlist_paths"])
    
    print("collected CSV data")

def checkbox_clicked():
    global search_metadata
    global tkColHeaderVar
    global tkRowHeaderVar

    search_metadata["csv_headerFlags"] = [tkRowHeaderVar.get(),tkColHeaderVar.get()]
    print(search_metadata["csv_headerFlags"])

    

#main
def main():
    global calendar_window
    
    global window
    global url_searchlist_textbox
    global newsAlertDropdown
    global custom_url_searchlist
    global timeDropDown
    global wordlistsScrollable
    global geometryDropdown
    global max_scale
    global min_scale
    global subjects
    global headlessDropdown
    global wordlistScalingDropdown
    scopes = ['https://www.googleapis.com/auth/gmail.readonly']

    

    window = Tk()

    window.geometry("853x655") #+200 pixels in y dir
    window.configure(bg = "#1C375E")


    canvas = Canvas(
        window,
        bg = "#1C375E",
        height = 655,
        width = 853,
        bd = 0,
        # highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    
    canvas.create_text(
        21.0,
        83.0,
        anchor="nw",
        text="Select Google Alert",
        fill="#FFFFFF",
        font=("Inter", 20 * -1)
    )
    
    canvas.create_text(
        341.0+90,
        83.0,
        anchor="nw",
        text="Select Time Range",
        fill="#FFFFFF",
        font=("Inter", 20 * -1)
    )

    canvas.create_text(
        21.0,
        174.0,
        anchor="nw",
        text="Wordlists to Search Against",
        fill="#FFFBFB",
        font=("Inter", 15 * -1)
    )

    canvas.create_rectangle(
        21.0,
        192.0,
        72.0,
        360.0,
        fill="#5DA2BE",
        outline="")
    
    #selection dropdown for glyph node scaling relative to wordlists: total wordcount, %wordlist, booleanwordcount
    wordlistScalingDropdown = ttk.Combobox(values=["Total Wordcount","% Wordlist","Boolean Wordcount"])
    wordlistScalingDropdown.place(x=110, y = 480, height=26, width=150)
    wordlistScalingDropdown.bind("<<ComboboxSelected>>", change_wordlist_scaling_selection)
    wordlistScalingDropdown.insert(0,"Total Wordcount")

    #The selection dropdown for headless browser
    headlessDropdown = ttk.Combobox(values=["Don't Show Browser","Show browser"])
    headlessDropdown.place(x=526, y=360,height=26,width=150)
    headlessDropdown.bind("<<ComboboxSelected>>", change_headless_selection)
    headlessDropdown.insert(0,"Don't Show Browser")

    # # The selection dropdown for the news alerts
    newsAlertDropdown = ttk.Combobox(values = subjects)
    newsAlertDropdown.place(x=80, y=110, height=26, width=200)
    newsAlertDropdown.bind("<<ComboboxSelected>>", change_subject_selection)
    newsAlertDropdown.insert(0,"Sign In First")

    #the selection dropdown for easy last x time
    timeDropDown = ttk.Combobox(values=["Today","Last 2 Days","Last 3 Days","Last Week"])
    timeDropDown.place(x=415, y=110, height=26, width=85)
    timeDropDown.insert(0,"Today")

    timeDropDown.bind("<<ComboboxSelected>>", select_newer_than)
    

    #The select start date, select end date calendar selection buttons
    
    button_select_start_date = Button(window, text="Start Date", command = lambda: select_dates(True))
    button_select_start_date.place(x=515, y=110, height=26, width=70)

    button_select_end_date = Button(window, text="End Date", command = lambda: select_dates(False))
    button_select_end_date.place(x=600, y=110, height=26, width=70)

    #the min and max scaling text boxes
    canvas.create_text(21,460, anchor="nw", text="Glyph Scaling (Min Max)", fill="#FFFFFF", font=("Inter", 15 * -1))
    min_scale = Entry(window)
    min_scale.place(x = 21, y = 480, height=26, width=35)
    min_scale.insert(0,"0.2")

    max_scale = Entry(window)
    max_scale.place(x = 60, y = 480, height=26, width=35)
    max_scale.insert(0,"2.5")

    
    #The Wordlists.txt viewer 
    wordlistsScrollable = scrolledtext.ScrolledText(window, wrap = WORD)
    wordlistsScrollable.place(x=72,y=192,width=262,height=168)

    #writing print messages to status terminal
    terminalScrollable = scrolledtext.ScrolledText(window, wrap = WORD)
    terminalScrollable.place(x=526,y=390,width=320,height=200)
    sys.stdout = RedirectText(terminalScrollable)

    #the select geometry choice dropdown (combobox)
    canvas.create_text(21,400, anchor="nw", text="Glyph Geometry", fill="#FFFFFF", font=("Inter", 15 * -1))
    geometryDropdown = ttk.Combobox(values = ["Sphere","Toroid","Cube","Octahedron"]) #plan to add cylinder
    geometryDropdown.place(x=21, y=420, height=26, width=100)
    geometryDropdown.bind("<<ComboboxSelected>>", change_glyph_geo_selection)
    geometryDropdown.insert(0,'Toroid')

    #create the fuzzifier slider
    canvas.create_text(415,174, anchor="nw", text="Search Fuzziness", fill="#FFFFFF", font=("Inter", 15 * -1))
    canvas.create_text(415,200, anchor="nw", text="Require \nany match", fill="#FFFFFF", font=("Inter", 11 * -1))
    canvas.create_text(590,200, anchor="nw", text="Require \nexact match", fill="#FFFFFF", font=("Inter", 11 * -1))


    fuzzifier_val = 0.6
    def fuzzifier_changed(event):
        global search_metadata
        search_metadata["search_fuzziness"] = round(fuzzifier.get(),2)
        print("Search Fuzziness Changed to:", search_metadata["search_fuzziness"])
    fuzzifier = ttk.Scale(window, from_=0, to=1, variable=fuzzifier_val,command=fuzzifier_changed)
    fuzzifier.set(0.6)

    fuzzifier.place(x=480, y=200,height=26, width=100)

    #create dropdown to select scaling type
    canvas.create_text(21,530, anchor="nw", text="Scaling Type", fill="#FFFFFF", font=("Inter", 15 * -1))
    scaletypeDropdown = ttk.Combobox(values=["minmax"],)
    scaletypeDropdown.place(x=21, y=550, height=26, width=100)
    scaletypeDropdown.set("minmax")
    def scaletypeChanged(event):
        global search_metadata
        search_metadata["scaling_type"] = scaletypeDropdown.get()
        print("scaling type changed to",search_metadata["scaling_type"])
    scaletypeDropdown.bind("<<ComboboxSelected>>",scaletypeChanged)

    #Create the dropdown to select scaling scope (by gyph or by dataset)
    canvas.create_text(21,580, anchor="nw", text="Scaling Scope", fill="#FFFFFF", font=("Inter", 15 * -1))
    scalescopeDropdown = ttk.Combobox(values=["dataset","glyph"])
    scalescopeDropdown.place(x=21, y=600, height=26, width=100)
    scalescopeDropdown.set("dataset")
    def scalescopeChanged(event):
        global search_metadata
        search_metadata["scaling_scope"] = scalescopeDropdown.get()
        print("scaling type changed to",search_metadata["scaling_scope"])
    scalescopeDropdown.bind("<<ComboboxSelected>>",scalescopeChanged)

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_selected_image_1 = PhotoImage(
        file=relative_to_assets("button_1_selected.png"))
    button_1 = Button(
        image=button_image_1,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (button_click(button_1,button_image_1,button_selected_image_1),
                        print("Group 1 Selected"),
                        display_current_wordlist()),
        # relief="flat"
    )
    button_1.place(
        x=21.0,
        y=192.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_1 = PhotoImage(
        file=relative_to_assets("button_hover_1.png"))

    def button_1_hover(e):
        if id(last_button_clicked['button']) == id(button_1):
            return
        button_1.config(
            image=button_image_hover_1
        )
    def button_1_leave(e):
        
        if id(last_button_clicked['button']) != id(button_1):
            button_1.config(image=button_image_1)
        
        

    button_1.bind('<Enter>', button_1_hover)
    button_1.bind('<Leave>', button_1_leave)


    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_selected_image_2 = PhotoImage(
        file=relative_to_assets("button_2_selected.png"))
    button_2 = Button(
        image=button_image_2,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (button_click(button_2,button_image_2,button_selected_image_2),
                        print("Group 2 Selected"),
                        display_current_wordlist()),
                    
        # relief="flat"
    )
    button_2.place(
        x=21.0,
        y=216.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_2 = PhotoImage(
        file=relative_to_assets("button_hover_2.png"))

    def button_2_hover(e):
        if id(last_button_clicked['button']) == id(button_2):
            return
        button_2.config(
            image=button_image_hover_2
        )
    def button_2_leave(e):

        if id(last_button_clicked['button']) != id(button_2):
            button_2.config(image=button_image_2)
        # button_2.config(
        #     image=button_image_2
        # )

    button_2.bind('<Enter>', button_2_hover)
    button_2.bind('<Leave>', button_2_leave)


    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    button_selected_image_3 = PhotoImage(
        file=relative_to_assets("button_3_selected.png"))
    button_3 = Button(
        image=button_image_3,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (button_click(button_3,button_image_3,button_selected_image_3),
                        display_current_wordlist(),
                        print("Group 3 Selected")),
        # relief="flat"
    )
    button_3.place(
        x=21.0,
        y=240.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_3 = PhotoImage(
        file=relative_to_assets("button_hover_3.png"))

    def button_3_hover(e):
        if id(last_button_clicked['button']) == id(button_3):
            return
        button_3.config(
            image=button_image_hover_3
        )
    def button_3_leave(e):

        if id(last_button_clicked['button']) != id(button_3):
            button_3.config(image=button_image_3)
        # button_3.config(
        #     image=button_image_3
        # )

    button_3.bind('<Enter>', button_3_hover)
    button_3.bind('<Leave>', button_3_leave)


    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    button_selected_image_4 = PhotoImage(
        file=relative_to_assets("button_4_selected.png"))
    button_4 = Button(
        image=button_image_4,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (button_click(button_4,button_image_4,button_selected_image_4),
                        display_current_wordlist(),
                        print("Group 4 Selected")),
        # relief="flat"
    )
    button_4.place(
        x=21.0,
        y=264.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_4 = PhotoImage(
        file=relative_to_assets("button_hover_4.png"))

    def button_4_hover(e):
        if id(last_button_clicked['button']) == id(button_4):
            return
        button_4.config(
            image=button_image_hover_4
        )
    def button_4_leave(e):
        if id(last_button_clicked['button']) != id(button_4):
            button_4.config(image=button_image_4)
        # button_4.config(
        #     image=button_image_4
        # )

    button_4.bind('<Enter>', button_4_hover)
    button_4.bind('<Leave>', button_4_leave)


    button_image_5 = PhotoImage(
        file=relative_to_assets("button_5.png"))
    button_selected_image_5 = PhotoImage(
        file=relative_to_assets("button_5_selected.png"))
    button_5 = Button(
        image=button_image_5,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (button_click(button_5,button_image_5,button_selected_image_5),
                        display_current_wordlist(),
                        print("Group 5 Selected")),
        # relief="flat"
    )
    button_5.place(
        x=21.0,
        y=288.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_5 = PhotoImage(
        file=relative_to_assets("button_hover_5.png"))

    def button_5_hover(e):
        if id(last_button_clicked['button']) == id(button_5):
            return
        button_5.config(
            image=button_image_hover_5
        )
    def button_5_leave(e):
        if id(last_button_clicked['button']) != id(button_5):
            button_5.config(image=button_image_5)
        # button_5.config(
        #     image=button_image_5
        # )

    button_5.bind('<Enter>', button_5_hover)
    button_5.bind('<Leave>', button_5_leave)


    button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    button_selected_image_6 = PhotoImage(
        file=relative_to_assets("button_6_selected.png"))
    button_6 = Button(
        image=button_image_6,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (button_click(button_6,button_image_6,button_selected_image_6),
                        display_current_wordlist(),
                        print("Group 6 Selected")),
        # relief="flat"
    )
    button_6.place(
        x=21.0,
        y=312.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_6 = PhotoImage(
        file=relative_to_assets("button_hover_6.png"))

    def button_6_hover(e):
        if id(last_button_clicked['button']) == id(button_6):
            return
        button_6.config(
            image=button_image_hover_6
        )
    def button_6_leave(e):
        if id(last_button_clicked['button']) != id(button_6):
            button_6.config(image=button_image_6)
        # button_6.config(
        #     image=button_image_6
        # )

    button_6.bind('<Enter>', button_6_hover)
    button_6.bind('<Leave>', button_6_leave)


    button_image_7 = PhotoImage(
        file=relative_to_assets("button_7.png"))
    button_selected_image_7 = PhotoImage(
        file=relative_to_assets("button_7_selected.png"))
    button_7 = Button(
        image=button_image_7,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (button_click(button_7,button_image_7,button_selected_image_7),
                        display_current_wordlist(),
                        print("Group 7 Selected")),
        # relief="flat"
    )
    button_7.place(
        x=21.0,
        y=336.0,
        width=51.0,
        height=24.0
    )

    button_image_hover_7 = PhotoImage(
        file=relative_to_assets("button_hover_7.png"))

    def button_7_hover(e):
        if id(last_button_clicked['button']) == id(button_7):
            return
        button_7.config(
            image=button_image_hover_7
        )
    def button_7_leave(e):
        if id(last_button_clicked['button']) != id(button_7):
            button_7.config(image=button_image_7)
        # button_7.config(
        #     image=button_image_7
        # )

    button_7.bind('<Enter>', button_7_hover)
    button_7.bind('<Leave>', button_7_leave)



    button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))
    button_9 = Button(
        image=button_image_9,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (print("button_9 clicked"),
                        upload_to_group()),
        # relief="flat"
    )
    button_9.place(
        x=338.0,
        y=334.0,
        width=51.0,
        height=26.0
    )

    button_image_hover_9 = PhotoImage(
        file=relative_to_assets("button_hover_9.png"))

    def button_9_hover(e):
        button_9.config(
            image=button_image_hover_9
        )
    def button_9_leave(e):
        button_9.config(
            image=button_image_9
        )

    button_9.bind('<Enter>', button_9_hover)
    button_9.bind('<Leave>', button_9_leave)


    
    button_10 = Button(
        text="Retrieve Gmail \n Articles",
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (print("Collecting Alert Content"),
                        #  retrieve_gmail_articles()
                        threading.Thread(target=retrieve_gmail_articles).start(),
        ),
        # relief="flat"
    )
    button_10.place(
        x=526.0,
        y=406.0+200,
        width=100.0,
        height=37.0
        
    )


   
    button_11 = Button(
        
        # borderwidth=0,
        # highlightthickness=0,
        text = "Count \n words",
        command=lambda: (threading.Thread(target=count_articleData_words).start(),
                         
                        ),
        # relief="flat"
    )
    button_11.place(
        x=634.0,
        y=406.0+200,
        width=45.0,
        height=37.0
    )

    button_11_half = Button(text="create \n Viz",
                            command=lambda: (threading.Thread(target=create_viz).start())
                            )
    button_11_half.place(
        x=634.0+50,
        y=406.0+200,
        width=45.0,
        height=37.0
    )



    button_image_12 = PhotoImage(
        file=relative_to_assets("button_12.png"))
    button_12 = Button(
        image=button_image_12,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (print("button_12 clicked"),
                        open_in_antz()),
        # relief="flat"
    )
    button_12.place(
        x=742.0,
        y=406.0+200,
        width=100.0,
        height=37.0
    )

    button_image_hover_12 = PhotoImage(
        file=relative_to_assets("button_hover_12.png"))

    def button_12_hover(e):
        button_12.config(
            image=button_image_hover_12
        )
    def button_12_leave(e):
        button_12.config(
            image=button_image_12
        )

    button_12.bind('<Enter>', button_12_hover)
    button_12.bind('<Leave>', button_12_leave)


    button_image_14 = PhotoImage(
        file=os.path.join(DaveArticleScraperDir,'build','assets','frame0','button_14.png'))
    button_14 = Button(
        image=button_image_14,
        # borderwidth=0,
        # highlightthickness=0,
        command=lambda: (print("button_14 clicked"),
                        delete_from_group()),
        # relief="flat"
    )
    button_14.place(
        x=338.0,
        y=334.0-28,
        width=51.0,
        height=26.0
    )

    button_image_hover_14 = PhotoImage(
        file=os.path.join(DaveArticleScraperDir,'build','assets','frame0','button_hover_14.png'))

    def button_14_hover(e):
        button_14.config(
            image=button_image_hover_14
        )
    def button_14_leave(e):
        button_14.config(
            image=button_image_14
        )

    button_14.bind('<Enter>', button_14_hover)
    button_14.bind('<Leave>', button_14_leave)

    

    canvas.create_text(
        306.0+65,
        107.0,
        anchor="nw",
        text="AND",
        fill="#FFFFFF",
        font=("Inter", 20 * -1)
    )

    canvas.create_text(
        21.0,
        20.0,
        anchor="nw",
        text="GlyphSearch",
        fill="#FFFFFF",
        font=("Inter Bold", 36 * -1)
    )

    button_click(button_1,button_image_1,button_selected_image_1)
    display_current_wordlist()

    #the sign in button
    button_auth = Button(window,text="Sign In",command=google_sign_in)
    button_auth.place(x=21, y=110, height=26, width=55)

    #sign out button
    button_sign_out = Button(window,text="Sign Out",command=google_sign_out)
    button_sign_out.place(x=21, y=140, height=26, width=55)

    #upload collected wordlists button
    button_upload_articleData = Button(window,text="Upload",command=upload_articleData_json)
    button_upload_articleData.place(x=550,y=585,height=26,width=50)

    button_upload_wordcount = Button(window,text="Upload",command=upload_wordcount_json)
    button_upload_wordcount.place(x=630,y=585,height=26,width=50)

    #Extra BS window
    button_open_bs_window = Button(window, text="Other Text \n Options",command=extraBSWindow)
    button_open_bs_window.place(x=720,y=103,height=38,width=70)


    window.resizable(False, False)
    window.mainloop()


if __name__ == "__main__":
    main()
    # button_click(button_1,button_image_1,button_selected_image_1)